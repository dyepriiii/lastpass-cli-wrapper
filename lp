#!/usr/bin/perl

use strict;
use warnings;
use String::ShellQuote qw( shell_quote );
use Time::Piece;
use Getopt::Long qw( GetOptions );


my $config_file = "config";

# defaults
my $email = 'user@example.com';
my $lpass_binary = "/usr/bin/lpass";
my $pw_size = "20";
my $pw_use_symbols = "yes";
my $folder = "";

sub usage {
    print "Usage\n";
    print "  $0 [ --help | -h | -? ] to show this message\n";
    print "  $0 [ --add | --new | -a | -n ]\n";
    print "  $0 [ --rm | --delete | -r | -d ] ID1 {ID2 ID3 ...}\n";
    print "  $0 [ --search | -s ] SEARCH_QUERY\n";
    print "  $0 [--edit | -e ] NAME_OR_ID\n";
}

sub read_config {
    # dummy var
    my $varname;

    open(my $input, "<", $config_file) or die "$0: Error opening `$config_file`: $!\n";

    while (<$input>) {
        chomp;
        if ($_ =~ /^email/) {
            ($varname, $email) = split(/=/, $_);
            $email =~ s/\s+//g;
        } elsif ($_ =~ /^lpass_binary/) {
            ($varname, $lpass_binary) = split(/\s+|=|\s$/, $_);
            $lpass_binary =~ s/\s+//g;
        } elsif ($_ =~ /^pw_size/) {
            ($varname, $pw_size) = split(/\s+|=|\s$/, $_);
            $pw_size =~ s/\s+//g;
        } elsif ($_ =~ /^pw_use_symbols/) {
            ($varname, $pw_use_symbols) = split(/\s+|=|\s$/, $_);
            $pw_use_symbols =~ s/\s+//g;
        } elsif ($_ =~ /^folder/) {
            ($varname, $folder) = split(/\s+|=|\s$/, $_);
            $folder =~ s/\s+//g;
        } else {
            # do nothing;
        }
    }
}

sub do_login {
    my $retval = system($lpass_binary, "status");
    if ($retval != 0) {
        if (system($lpass_binary, "login", "--trust", $email) == 0) {
            return 1;
        } else {
            return 0;
        }
    } else {
        return 1;
    }
}

sub generate_password {
    my $date_stamp = localtime->ymd('-') . "." . localtime->hms('');
    my $gen_command = "lpass generate --sync=no ".shell_quote($date_stamp)." 20";
    # we want to use qx (or backticks) as we want to store the return value
    # we can't capture the return value of a `system` call
    my $pw = qx($gen_command) or warn;

    # if failed for some reason;
    # we'll create a our password instead
    # with our super lazy pw generator
    # so dumb you don't want to use this
    # as your password.
    if ($? != 0) {
        my @chars = ("A".."Z", "a".."z", 0..9);
        my $rand_string;
        $rand_string .= $chars[rand @chars] for 1..20;
        $pw = $rand_string;
    }

    # cleanup: delete autogenerated pw on lp
    # we add dummy because we're doing `shift` on
    # delete_entry sub
    delete_entry("dummy", $date_stamp);

    return $pw;
}


sub add_server_entry {
    do_login or die;

    print "Username: ";
    my $username = <STDIN>;
    chomp $username;

    print "Password (leave blank to generate): ";
    my $password = <STDIN>;
    chomp $password;

    # we'll generate our passwords if empty

    $password = generate_password if $password eq "";

    print "Password: " . $password;

    print "Hostname: ";
    my $hostname = <STDIN>;
    chomp $hostname;

    print "Notes: ";
    my $notes = <STDIN>;
    chomp $notes;

    print "Entryname: ";
    my $name = <STDIN>;
    chomp $name;

    my $add_string = "Username: " . $username . "\nPassword: ". $password
                     . "\nHostname: " . $hostname . "\nNotes:\n" . $notes . "\n";

    my $command = ("echo ".shell_quote($add_string)." | lpass add --sync=now "
                  ."--non-interactive --note-type=server ".shell_quote($folder).shell_quote($name));
    system($command) == 0
        or die;
}

sub delete_entry {
    shift;
    my $input = shift;
    my @input = split /\s+/, $input;

    my $failed = 0;
    foreach my $id (@input) {
        my @args = ("lpass", "rm", $id);
        system(@args) == 0
        # or warn "Failed with error:"; # warn - continue; die will exit immediately
          or warn;
    }
}

sub do_search {
    do_login or die;
    shift;
    my $search_query = shift;
    chomp $search_query;
    my @args = ($lpass_binary, "show", "-x", "-G", "--all", $search_query);
    system(@args) == 0
        or die
}

sub do_edit {
    print "Not yet implemeneted\n";
}

sub main {
    read_config;
    GetOptions ('search|s=s' => \&do_search,
                'r|d|rm|delete=s' => \&delete_entry,
                'a|n|add|new' => \&add_server_entry,
                'e|edit=s' => \&do_edit,
                'g|generate' => sub { print generate_password },
                'h|?|help' => sub { usage },
    );
}

if (@ARGV > 0) {
    main;
} else {
    usage;
}
